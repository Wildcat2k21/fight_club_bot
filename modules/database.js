const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');
const {WriteInLogFile} = require('./Other');

// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class Database {
    constructor(dbFilePath) {
        this.dbFilePath = dbFilePath;
        this.db = null;
    }

    async insert(tableName, params){
        return new Promise((resolve, reject) => {

            //–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è –≤—Å—Ç–≤–∫–∏
            const fields = Object.keys(params);
            const values = Object.values(params).map(value => {
                return clearSqlValue(value);
            });

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            const sql = `INSERT INTO ${tableName} (${fields.join(', ')}) VALUES (${values.join(', ')})`;

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            this.executeNoDataReturning(sql, true).then(result => resolve(result)).catch(err => {
                reject(err);
            });
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
    async update(tableName, update, condition){
        return new Promise((resolve, reject) => {

            // –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            const updateParams = Object.keys(update).map(field => {
                const convertedValue = clearSqlValue(update[field]);
                return `${field} = ${convertedValue}`;
            });

            const conditionClause = buildSqlCondition(condition);

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            const sql = `UPDATE ${tableName} SET ${updateParams.join(', ')}${conditionClause}`;

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            this.executeNoDataReturning(sql).then(result => resolve(result)).catch(err => reject(err));
        });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    async delete(tableName, condition){
        return new Promise((resolve, reject) => {
  
            const conditionClause = buildSqlCondition(condition);
            
            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            const sql = `DELETE FROM ${tableName}${conditionClause}`;

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            this.executeNoDataReturning(sql).then(result => resolve(result)).catch(err => reject(err));
        });
    }

    async find(tableName, condition, limit, desc) {
        return new Promise((resolve, reject) => {
            
            const conditionClause = buildSqlCondition(condition, limit, desc);

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            const sql = `SELECT * FROM ${tableName}${conditionClause}`;

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            this.executeWithReturning(sql).then(result => {
                // –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
                if(limit && limit.toString() === 'true'){
                    resolve(result[0]);
                }

                resolve(result)

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            }).catch(err => reject(err));
        })
    }

    // –ó–∞–ø—Ä–æ—Å –±–µ–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    async executeNoDataReturning(sql, returnId = false) {
        return new Promise((resolve, reject) => {
            this.db.run(sql, function(err) {
                if (err) return reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: ${err.message}`));
                resolve((returnId) ? this.lastID : undefined);
            });
        });
    }

    // –ó–∞–ø—Ä–æ—Å —Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    async executeWithReturning(sql) {
        return new Promise((resolve, reject) => {
            this.db.all(sql, [], function(err, rows) {
                if (err) return reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: ${err.message}`));
                resolve(rows);
            });
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    connect(dbPath, sqlFilePath) {
        return new Promise((resolve, reject) => {
            this.db = new sqlite3.Database(this.dbFilePath, (err) => {
                if (err) return reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${err.message}`));

                // –í–∫–ª—é—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
                this.db.run('PRAGMA foreign_keys = ON', (err) => {
                    if (err) return reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏: ${err.message}`));
                });

                // –û–æ–≥–∏ –∏ —Ñ–∞–π–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                WriteInLogFile('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞‚ö°');
                const sqlFile = path.resolve(sqlFilePath);

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                if(fs.statSync(dbPath).size > 0) {
                    WriteInLogFile('–ò–Ω–∏—Ü–∏–∞–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä—É–±–µ—Ç—Å—è üëå');
                    return resolve();
                }

                // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                fs.readFile(sqlFile, 'utf8', (err, data) => {
                    if (err) return reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å SQL —Ñ–∞–π–ª: ${err.message}`));

                    this.db.exec(data, (err) => {
                        if (err) return reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL —Ñ–∞–π–ª: ${err.message}`));
                        WriteInLogFile('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ ‚ú®');
                        resolve();
                    });
                });
            });
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    close() {
        if (this.db) {
            this.db.close((err) => {
                if (err) throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${err.message}`) 
                else WriteInLogFile('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞. üëãüëãüëã');
            });
        }
    }
}

//—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
function buildSqlCondition(condition = [], limit, desc){

    //–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
    const operators = {
        exacly : '=',
        less : '<',
        more : '>',
        exaclyLess : '<=',
        exaclyMore : '>=',
        nonEqual: '!='
    }

    const orConditions = condition.map(orGroup => {
        return orGroup.map(andGroup => {
            //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è
            if(typeof andGroup !== 'object' || !andGroup['field']) {
                throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—è –≤ —É—Å–ª–æ–≤–∏–∏');
            }

            //–ø–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            const fieldName = andGroup['field'];
            const operatorName = Object.keys(andGroup).find(operatorName => operators[operatorName]);

            //–µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É—Å–ª–æ–≤–∏–µ —è–≤–ª—è–µ—Ç—Å—è null
            if(!operatorName && Object.keys(andGroup).indexOf('isNull') + 1){
                return `${fieldName} ${andGroup.isNull.toString() === 'true' ? 'IS NULL' : 'IS NOT NULL'}`;
            }

            //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            if(!operatorName || andGroup[operatorName] === undefined){
                throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —É—Å–ª–æ–≤–∏–∏');
            }

            //—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —É—Å–ª–æ–≤–∏—è
            const value = andGroup[operatorName];
            const operator = operators[operatorName];
            const formatValue = clearSqlValue(value);

            //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
            return `${fieldName} ${operator} ${formatValue}`;

        }).join(' AND ')
    }).join(' OR ')


    let descClause = '', limitClause = '';

    //–ª–∏–º–∏—Ç—ã –ø–æ –≤—ã–±–æ—Ä–∫–µ
    if (limit && (limit.toString() === 'true' || (!isNaN && limit > 0))){
        limitClause = ` LIMIT ${ limit.toString() === 'true' ? 1 : limit }`;
    }

    //–ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if(typeof desc === 'object'){
        const columnName = desc.byField ? ' ' + desc.byField : '';
        descClause = ` ORDER BY${columnName}${desc.decrease.toString() === 'true' ? ' DESC' : ' ASC'}`;
    }

    return `${orConditions ? ` WHERE ${orConditions}` : ''}${descClause}${limitClause}`;
}

//–æ—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –≤—Å—Ç–∞–≤–∫–∏
function clearSqlValue(value){

    //–æ–±—Ä–∞–±–æ—Ç–∫–∞ null
    if(value === null || value === undefined) return 'NULL'

    //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    return (isNaN(value))  ? `'${value.replace(/'/g, '\'\'')}'` : value;
}

module.exports = Database;