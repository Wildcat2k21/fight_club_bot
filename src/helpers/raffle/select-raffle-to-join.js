const { getServices } = require('@services');
const { bot, db } = getServices();
const createButtons = require('@utils/create-buttons');
const config = require('@/config');

//–≤—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏—è
async function selectRaffleToJoin(state, message) {

    //eslint-disable-next-line no-useless-escape
    if (message && message.match(/[\*\(\)\[\]\`_]/g)) {
        const warnMessage = `üîÅ *–í–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã*/n/n
        –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –∏–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã`.format();
        return bot.sendMessage(state.chatId, warnMessage, state.options);
    }

    if(state.stepName === 'fullname'){

        if(!message) {
            return bot.sendMessage(state.chatId, 'üîÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)', state.options);
        }

        state.data.fullname = message;
        state._actionHandleFunction = selectRaffleToJoin;

        //—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const buttons = createButtons([{
            text: '–û—Ç–º–µ–Ω–∏—Ç—å ‚úñÔ∏è',
            data: 'main menu'
        }, {
            text: '–ù–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ üîô',
            data: 'step back'
        }]);

        state.recordStep('phone', '‚Ñπ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–î–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –≤–∞–º–∏)', buttons);
        return state.executeLastStep();
    }
    else{
        if(!message) {
            return bot.sendMessage(state.chatId, 'üîÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–î–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –≤–∞–º–∏)', state.options);
        }

        const numStr = message.replaceAll(' ', '');

        if(isNaN(numStr) || numStr.length !== 11) {
            return await bot.sendMessage(state.chatId, "üîÅ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n–ü—Ä–∏–º–µ—Ä: 8 987 654 32 10", state.options);
        }

        state.data.phone = numStr;

        //—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        const buttons = createButtons([{
            text: '–û—Ç–º–µ–Ω–∏—Ç—å ‚úñÔ∏è',
            data: 'main menu'
        }, {
            text: '–ù–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ üîô',
            data: 'step back'
        }, {
            text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ‚úîÔ∏è',
            data: 'confirm join_raffle'
        }]);

        // –ø–æ–ª—É—á–∞–µ–º —Å–∞–º —Ä–æ–∑—ã–≥—Ä—ã—à
        const raffle = await db.find('raffles', [[{
            field: 'id',
            exacly: state.data.raffleId
        }]], true);

        state.data.to_pay = raffle.price;
        const priceClause = Number(raffle.price) ? `${raffle.price} ‚ÇΩ` : "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ üéÅ";

        state.recordStep('raffle offer_preview', `
            üéØ *–†–æ–∑—ã–≥—Ä—ã—à:* ${raffle.title}/n
            ‚úä *–ö –æ–ø–ª–∞—Ç–µ:* ${priceClause}/n/n
            *–û—Ç:* ${state.data.fullname}/n
            *–¢–µ–ª–µ—Ñ–æ–Ω:* ${state.data.phone}/n/n
            ${config.payment_page}
        `.format(), buttons);

        return state.executeLastStep();
    }
}

module.exports = selectRaffleToJoin;