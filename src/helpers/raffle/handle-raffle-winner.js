const { getServices } = require('@services');
const { bot, db } = getServices();
const createButtons = require('@utils/create-buttons');

async function handleRaffleWinner(state, message){
    if(!(/^\d+:\d+$/).test(message)){
        return bot.sendMessage(
            state.chatId,
            `üîÅ *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞, –∫ –ø—Ä–∏–º–µ—Ä—É:*/n/n13:1 *(–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç 13 –±–∏–ª–µ—Ç –∑–∞–Ω—è—Ç 1 –º–µ—Å—Ç–æ)*`.format(),
            state.options
        );
    }

    const raffleId = state.data.raffleId;
    const [ticketNum, prizeNum] = message.split(':');

    const raffleTicket = await db.find('raffle_tickets', [[{ field: "raffle_id", exacly: raffleId }, {
        field: "ticket_id", exacly: ticketNum
    }]], true);

    const raffleWinners = await db.find('raffle_winners', [[
        {
            field: "raffle_id", exacly: raffleId
        },
        {
            field: "position", exacly: prizeNum
        }
    ]], true);

    if(!raffleWinners || !raffleTicket) {
        return bot.sendMessage(
            state.chatId,
            `üîÅ –ù–µ—Ç –±–∏–ª–µ—Ç–∞ ‚Ññ${ticketNum} –∏–ª–∏ –ø—Ä–∏–∑–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ ‚Ññ${prizeNum} –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ/n/n*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞*`.format(),
            state.options
        );
    }

    if(raffleWinners.raffle_ticket_id) {
        return bot.sendMessage(
            state.chatId,
            `üîÅ –ë–∏–ª–µ—Ç ‚Ññ${raffleWinners.raffle_ticket_id} —É–∂–µ –∑–∞–Ω—è–ª –ø—Ä–∏–∑–æ–≤–æ–µ –º–µ—Å—Ç–æ ‚Ññ${raffleWinners.position} –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ/n/n*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞*`.format(),
            state.options
        );
    }

    const checkTicketForOtherWin = await db.find('raffle_winners', [[{
        field: 'raffle_ticket_id', exacly: ticketNum
    },
    {
        field: 'raffle_id', exacly: raffleId    
    }]],true);

    // –ï—Å–ª–∏ –±–∏–ª–µ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –º–µ—Å—Ç–æ, —Ç–æ –æ—Ç–∫–∞–∑
    if(checkTicketForOtherWin) {
        return bot.sendMessage(
            state.chatId,
            `üîÅ –ë–∏–ª–µ—Ç ‚Ññ${ticketNum} –Ω–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç –¥–≤–∞ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –∑–∞–Ω—è–ª –º–µ—Å—Ç–æ ‚Ññ${checkTicketForOtherWin.position} –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ/n/n*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞*`.format(),
            state.options
        );
    }

    await db.update('raffle_winners', { 
        raffle_ticket_id: ticketNum 
    },
    [[{ 
        field: 'id', exacly: raffleWinners.id
    }]]);

    const allTickers = await db.find('raffle_tickets', [[{
        field: 'raffle_id', exacly: raffleId
    }]]);

    for(let ticket of allTickers) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞, —Ç–æ –Ω–µ –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if(!ticket.user_telegram_id) {
            continue;
        }

        const raffle = await db.find('raffles', [[{
            field: 'id', exacly: raffleId
        }]], true);

        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        try {
            if(ticket.ticket_id != ticketNum) {
                await bot.sendMessage(
                    ticket.user_telegram_id, `
                        üî• *–í —Ä–æ–∑—ã–≥—Ä—ã—à–µ "${raffle.title}" –±–∏–ª–µ—Ç ‚Ññ${ticketNum} –∑–∞–Ω—è–ª ${prizeNum}-–µ –º–µ—Å—Ç–æ!*/n/n
                        üéÅ *–†–∞–∑—ã–≥—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–∑:* ${raffleWinners.prize} !!!
                    `.format(),
                    { parse_mode: 'Markdown' }
                );
            }
            
            if(ticket.ticket_id == ticketNum) {
                await bot.sendMessage(
                    ticket.user_telegram_id, `
                        üî•üî•üî• *–í–´ –ü–û–ë–ï–î–ò–õ–ò –í –†–û–ó–´–ì–†–´–®–ï "${raffle.title}" –ó–ê–ù–Ø–í ${prizeNum}-–µ –º–µ—Å—Ç–æ!*/n/n
                        üéÅ *–í–∞—à –ø—Ä–∏–∑:* ${raffleWinners.prize} !!!/n/n
                        üéü *–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –±–∏–ª–µ—Ç–∞*: ${ticketNum}/n
                        ‚ÑπÔ∏è *–ü—Ä–µ–¥—ä—è–≤–∏—Ç–µ –±–∏–ª–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ "–£—á–∞—Å—Ç–Ω–∏–∫–∞–º"*
                    `.format(),
                    { parse_mode: 'Markdown' }
                );
            }
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        } catch {
            /** empty */
        }
    }

    await bot.sendMessage(
        state.chatId, "üì® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
    );

    state.action = 'default';

    state.recordStep('waing next step',
        `*–ë–∏–ª–µ—Ç ‚Ññ${ticketNum} –≤—ã–±—Ä–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ ${prizeNum}-–≥–æ –º–µ—Å—Ç–∞*`.format(),
        createButtons([{
            text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô',
            data: 'main menu'
        },{
            text: '–í—ã–±—Ä–∞—Ç—å –µ—â–µ ‚ûï',
            data: `RaffleWinner=${state.data.raffleId}`
        }]));

    return state.executeLastStep();
}

module.exports = handleRaffleWinner;