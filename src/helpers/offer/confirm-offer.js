const { getServices } = require('@services');
const { bot, db } = getServices();
const { randCode } = require('@utils/other');
const { CONFIG_FILE } = require('@consts/file-paths');
const config = require(CONFIG_FILE);
const createButtons = require('@utils/create-buttons');
const escapeMarkdown = require('@utils/escape-markdown');

const tableNames = {
    event: 'event_offers',
    merch: 'merch_offers',
    raffle: 'raffle_tickets'
}

const actionNames = {
    event: '—É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏',
    merch: '–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
    raffle: '—É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ'
}

const tabNames = {
    event: '–£—á–∞—Å—Ç–Ω–∏–∫–∞–º',
    merch: '–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã',
    raffle: '–£—á–∞—Å—Ç–Ω–∏–∫–∞–º'
}

//–ø–æ–¥—Ç–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function confirmOffer(state, offerType, offerId) {

    if(!tableNames[offerType]) {
        throw new Error(`–¢–∞–±–ª–∏—Ü–∞ ${offerType} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü`);
    }

    const table = tableNames[offerType];

    //–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const offer = await db.find(table, [[{
        field: 'id',
        exacly: offerId
    }]], true);

    if (!offer) return bot.sendMessage(state.chatId, '*–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω* ‚úä', { parse_mode: 'Markdown' });

    if (offer.accepted) return bot.sendMessage(state.chatId, '*–ó–∞–∫–∞–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω* ‚úä', { parse_mode: 'Markdown' });

    const offerClause = actionNames[offerType];

    //–≥–µ–Ω–µ—Ä–∏—Ü–∏—è –∫–æ–¥–∞, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    const recive_key = randCode(12);

    const thisOffer = await db.find(table, [[{ field: 'id', exacly: offerId }]], true);

    //–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const user = await db.find('users', [[{ field: 'telegram_id', exacly: thisOffer.user_telegram_id }]], true);

    //—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    if (!user.made_first_offer) {
        await db.update('users', { made_first_offer: 1 }, [[{ field: 'telegram_id', exacly: thisOffer.user_telegram_id }]]);
        if (user.invited_by) {
            const invitedByUser = await db.find('users', [[{ field: 'telegram_id', exacly: user.invited_by }]], true);
            const newDiscount = invitedByUser.discount += config.invite_discount;
            const normalDiscount = newDiscount > 100 ? 100 : newDiscount;
            await db.update('users', { discount: normalDiscount }, [[{ field: 'telegram_id', exacly: user.invited_by }]]);
            await bot.sendMessage(user.invited_by, `*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${escapeMarkdown(user.username)} —Å–¥–µ–ª–∞–ª –ø–ª–∞—Ç–Ω—ã–π –∑–∞–∫–∞–∑*/n/n
            üéÅ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å ${config.invite_discount} % –Ω–∞ –≤—Å–µ`.format(), { parse_mode: 'Markdown' });
        }
    }

    await db.update(table, { accepted: 1, recive_key }, [[{
        field: 'id',
        exacly: offerId
    }]]);

    await bot.sendMessage(state.chatId, `*–ó–∞–∫–∞–∑ –Ω–∞ ${offerClause} "${offer.title}" –æ—Ç @${escapeMarkdown(user.username)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úîÔ∏è*`, { parse_mode: 'Markdown' });

    try {
        //—Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(user.telegram_id, `*–ó–∞–∫–∞–∑ –Ω–∞ ${offerClause} "${offer.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úîÔ∏è*/n/n
            –î–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–∫–∞–∑—É —Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ "${tabNames[offerType]}"
            `.format(), createButtons([{
            text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô',
            data: 'main menu'
        }]));
    }
    catch {
        /** empty string */
    }
}

module.exports = confirmOffer;