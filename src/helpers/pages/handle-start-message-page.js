const { getServices } = require('@services');
const { bot } = getServices();
const createButtons = require('@utils/create-buttons');
const validateMarkdown = require('@utils/validate-markdown');

//–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async function handleStartMessagePage(state, message) {

    if (message && validateMarkdown(message)) {
        const warnMessage = `üîÅ *${validateMarkdown(message)}*`;
        return bot.sendMessage(state.chatId, warnMessage, state.options);
    }

    if (state.stepName === 'content') {

        if (!message) {
            return bot.sendMessage(state.chatId, 'üîÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', state.options);
        }

        state.data.newStartMessage = {
            content: message
        }

        state._actionHandleFunction = handleStartMessagePage;

        //—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        const buttons = createButtons([{
            text: '–û—Ç–º–µ–Ω–∏—Ç—å ‚úñÔ∏è',
            data: 'main menu'
        }, {
            text: '–ù–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ üîô',
            data: 'step back'
        }, {
            text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úîÔ∏è',
            data: 'confirm start_message'
        }])

        state.recordStep('confirm start_message', `ü§ù *–ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è*/n/n
            ${state.data.newStartMessage.content}
        `.format(), buttons);

        return state.executeLastStep();
    }
}

module.exports = handleStartMessagePage;