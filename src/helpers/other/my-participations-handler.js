const { getServices } = require('@services');
const { bot, db } = getServices();
const createButtons = require('@utils/create-buttons');
const Time = require('@utils/time');
const QRCode = require('qrcode');

const BOT_USERNAME = process.env.BOT_USERNAME;

// —É—á–∞—Å—Ç–Ω–∏–∫–∞–º: –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
async function myParticipationsHandler(state) {
    // –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü
    const eventOffers = await db.find('event_offers', [[{
        field: 'user_telegram_id',
        exacly: state.chatId
    }]]);

    const raffleOffers = await db.find('raffle_offers', [[{
        field: 'user_telegram_id',
        exacly: state.chatId
    }]]);

    // –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–∞–º, –Ω–∏ —Ç–∞–º
    if (!eventOffers.length && !raffleOffers.length) {
        return bot.sendMessage(
            state.chatId,
            '*–í—ã –ø–æ–∫–∞ –Ω–∏–≥–¥–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ* ‚úä\n\n–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤–æ –≤–∫–ª–∞–¥–∫–µ *"–ë–ª–∏–∂–∞–π—â–∏–µ —Å–æ–±—ã—Ç–∏—è / –†–æ–∑—ã–≥—Ä—ã—à–∏"* üëá',
            state.options
        );
    }

    // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –µ–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å —Ç–∏–ø–æ–º
    const normalized = [
        ...eventOffers.map(o => ({ ...o, _type: 'event' })),
        ...raffleOffers.map(o => ({ ...o, _type: 'raffle' }))
    ];

    // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ created_at (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    normalized.sort((a, b) => {
        const ta = Number(a.created_at) || 0;
        const tb = Number(b.created_at) || 0;
        return tb - ta;
    });

    // –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º
    for (let item of normalized) {
        try {
            if (item._type === 'event') {
                // —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
                const event = await db.find('events', [[{ field: 'id', exacly: item.event_id }]], true);

                // fallback –∑–Ω–∞—á–µ–Ω–∏—è
                const title = item.title || (event && event.title) || '–°–æ–±—ã—Ç–∏–µ';
                const date = event ? new Time(event.event_date).toFriendlyString() : '‚Äî';
                const place = event ? event.place : '‚Äî';
                const priceClause = Number(item.to_pay) ? `${item.to_pay} ‚ÇΩ` : "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ";

                if (item.accepted) {
                    const param = `ConfirmJoinEvent=${item.recive_key || ''}`;
                    const base64 = Buffer.from(param).toString('base64');
                    const checkUrl = `https://t.me/${BOT_USERNAME}?start=${base64}`;
                    const qrCodeBuffer = await QRCode.toBuffer(checkUrl, { type: 'png' });

                    const caption = `
                        *–ü—Ä–µ–¥—ä—è–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–π QR –∫–æ–¥ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏*/n/n
                        *–°–æ–±—ã—Ç–∏–µ:* ${title}/n
                        *–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:* ${date}/n
                        *–ú–µ—Å—Ç–æ:* ${place}/n
                        *–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úîÔ∏è
                    `.format();;

                    await bot.sendPhoto(state.chatId, qrCodeBuffer, {
                        caption,
                        parse_mode: 'Markdown'
                    });
                } else {
                    const message = `
                        *–°–æ–±—ã—Ç–∏–µ:* ${title}/n
                        *–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:* ${date}/n
                        *–ú–µ—Å—Ç–æ:* ${place}/n
                        *–û–ø–ª–∞—á–µ–Ω–æ:* ${item.to_pay || 0} ‚ÇΩ/n
                        *–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:* –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/n/n
                        ‚Ñπ *–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è QR –∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞*
                    `.format();

                    await bot.sendMessage(state.chatId, message, { parse_mode: 'Markdown' });
                }
            } else if (item._type === 'raffle') {
                // —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à
                const raffle = await db.find('raffles', [[{ field: 'id', exacly: item.raffle_id }]], true);

                const title = (raffle && raffle.name) || item.title || '–†–æ–∑—ã–≥—Ä—ã—à';
                const date = raffle ? new Time(raffle.raffle_date).toFriendlyString() : '‚Äî';
                const place = raffle ? raffle.place : '‚Äî';
                const priceClause = Number(item.to_pay) ? `${item.to_pay} ‚ÇΩ` : "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ";

                if (item.accepted) {
                    const param = `ConfirmJoinRaffle=${item.recive_key || ''}`;
                    const base64 = Buffer.from(param).toString('base64');
                    const checkUrl = `https://t.me/${BOT_USERNAME}?start=${base64}`;
                    const qrCodeBuffer = await QRCode.toBuffer(checkUrl, { type: 'png' });

                    const caption = `
                        *–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞:* ${item.id}/n/n
                        *–†–æ–∑—ã–≥—Ä—ã—à:* ${title}/n
                        *–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:* ${date}/n
                        *–ú–µ—Å—Ç–æ:* ${place}/n
                        *–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úîÔ∏è/n/n
                        *–ü—Ä–µ–¥—ä—è–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–π QR –∫–æ–¥ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ*
                    `.format();

                    await bot.sendPhoto(state.chatId, qrCodeBuffer, {
                        caption,
                        parse_mode: 'Markdown'
                    });
                } else {
                    const message = `
                        *–†–æ–∑—ã–≥—Ä—ã—à:* ${title}/n
                        *–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:* ${date}/n
                        *–ê–¥—Ä–µ—Å:* ${place}/n
                        *–û–ø–ª–∞—á–µ–Ω–æ:* ${item.to_pay || 0} ‚ÇΩ/n
                        *–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:* –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/n/n

                        ‚Ñπ *–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è QR –∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞*
                    `.format();

                    await bot.sendMessage(state.chatId, message, { parse_mode: 'Markdown' });
                }
            }
        } catch (err) {
            // –Ω–µ –ª–æ–º–∞–µ–º –≤—Å—ë –∏–∑-–∑–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ ‚Äî –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            console.error('myParticipationsHandler error:', err);
        }
    }

    // —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    return bot.sendMessage(
        state.chatId,
        '*–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏*',
        createButtons([{ text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô', data: 'main menu' }])
    );
}

module.exports = myParticipationsHandler;
